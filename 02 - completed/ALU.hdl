// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   Not(in=zx, out=nzx);
   And16(a=x, b[0]=nzx,b[1]=nzx,b[2]=nzx,b[3]=nzx,b[4]=nzx,b[5]=nzx,b[6]=nzx,b[7]=nzx,b[8]=nzx,b[9]=nzx,b[10]=nzx,b[11]=nzx,b[12]=nzx,b[13]=nzx,b[14]=nzx,b[15]=nzx, out=zx16);
   Mux16(a=x, b=zx16, sel=zx, out=ax);  //out=a if sel=0
   Not16(in=ax, out=nx16);
   Mux16(a=zx16, b=nx16, sel=nx, out=xx);  //out=a if sel=0
   Not(in=zy, out=nzy);
   And16(a=y, b[0]=nzy,b[1]=nzy,b[2]=nzy,b[3]=nzy,b[4]=nzy,b[5]=nzy,b[6]=nzy,b[7]=nzy,b[8]=nzy,b[9]=nzy,b[10]=nzy,b[11]=nzy,b[12]=nzy,b[13]=nzy,b[14]=nzy,b[15]=nzy, out=zy16);
   Mux16(a=y, b=zy16, sel=zy, out=ay);  //out=a if sel=0
   Not16(in=ay, out=ny16);
   Mux16(a=zy16, b=ny16, sel=ny, out=yy);  //out=a if sel=0
   Add16(a=xx, b=yy, out=xplusy);
   And16(a=xx, b=yy, out=xandy);
   Mux16(a=xandy, b=xplusy, sel=f, out=outf);  //out=a if sel=0
   Not16(in=outf, out=notf);
   Mux16(a=outf, b=notf, sel=no, out=outa);  //out=a if sel=0
   Lead0(in=outa, out=ng);
   First8(in=outa, out=first8);
   Second8(in=outa, out=second8);
   Or8Way(in=first8, out=z1);
   Or8Way(in=second8, out=z2);
   Or(a=z1, b=z2, out=nzr);
   Not(in=nzr, out=zr);
   And16(a=outa, b=true, out=out);
}