// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
	isRAM(address=address, out=isRAM);
	Not(in=isRAM, out=notRAM);
	Address14Bit(address=address, out=Address14Bit);
	Address13Bit(address=address, out=Address13Bit);
	isDeviceScreen(address=address, out=isDeviceScreen);
	And(a=isRAM, b=load, out=loadRAM);
	RAM16K(in=in, load=loadRAM, address=Address14Bit, out=RAMVal);
	And(a=notRAM, b=load, out=loadScreen);
	Screen(in=in, load=loadScreen, address=Address13Bit, out=ScreenVal);
	Keyboard(out=Keyboardout);
/**
 * 4-way 16-bit multiplexor.  
 * out = a if sel == 00
 *       b if sel == 01
 *       c if sel == 10
 *       d if sel == 11
 */
	Mux4Way16(a=Keyboardout, b=RAMVal, c=ScreenVal, d=RAMVal, sel[0]=isRAM, sel[1]=isDeviceScreen, out=out);
}